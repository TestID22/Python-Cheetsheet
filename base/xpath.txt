1) Делаем короткими
2) Привязываемся к уникальным объектам (которые характерны для конкретной области)


Here are some best practices for writing effective and maintainable XPaths, along with examples:

### 1. **Use Relative XPath over Absolute XPath**
   - **Absolute XPath** (`/html/body/div[2]/div[1]/ul/li[3]`) is prone to breaking if the structure changes.
   - **Relative XPath** (`//ul/li[3]`) is more resilient and easier to read.

   **Example**: `//div[@class='menu']/ul/li[3]`

### 2. **Use `@id` or `@class` for Unique Identifiers**
   - If elements have unique IDs or classes, use them to directly target the element.

   **Example**: `//*[@id='submit-button']`

### 3. **Use `contains()` to Handle Partial Matches**
   - `contains()` is useful when IDs or classes are dynamic or partially predictable.

   **Example**: `//button[contains(@class, 'submit-')]`

### 4. **Use `text()` to Match Exact Text**
   - Use `text()` to locate elements based on visible text, ensuring it’s unique to the element.

   **Example**: `//a[text()='Login']`

### 5. **Combine Multiple Attributes for Precision**
   - If an element does not have a unique ID or class, combine multiple attributes for better precision.

   **Example**: `//input[@type='text' and @name='username']`

### 6. **Use `starts-with()` for Dynamic IDs or Classes**
   - When IDs or classes start with predictable text, `starts-with()` can be helpful.

   **Example**: `//div[starts-with(@id, 'product-')]`

### 7. **Use Hierarchical Relationships When Needed**
   - If an element has a parent or sibling that’s easier to locate, use XPath to find elements relative to each other.

   **Example**: `//div[@class='product-name']/following-sibling::div[@class='price']`

### 8. **Avoid Overly Long or Complex XPaths**
   - Long XPaths are harder to maintain. Keep them as short as possible without sacrificing precision.

### Summary Example

Here’s a balanced XPath combining some of these techniques:
```
//div[@id='container']//input[contains(@class, 'search') and @type='text']
```

This XPath finds an `input` within a `div` with the ID `container`, having a class that includes "search" and where the input type is text. It’s concise, precise, and less likely to break on minor DOM changes.